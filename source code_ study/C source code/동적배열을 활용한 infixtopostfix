#include <ctype.h> // For isdigit() and isalpha()
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define INITIAL_CAPACITY 10

typedef struct Stack {
  char *arr;    //스택을 담기위한 배열
  int index;     //배열(스택)의 위치
  int capacity; //배열(스택)의 전체 크기
} Stack;

Stack *createStack() {
  Stack *stack = (Stack *)malloc(sizeof(Stack));
  //스택에 MAXSIZE * 문자의 크기의 메모리를 지정
  stack->arr = (char *)malloc(sizeof(char) * INITIAL_CAPACITY);
  //스택의 초기 index를 0으로 지정
  stack->index = 0;
  //스택의 크기를 MAXSIZE로 지정
  stack->capacity = INITIAL_CAPACITY;
  return stack;
}

//스택의 위치가 최대값과 같은지 확인
int isFull(Stack *stack) { return stack->index == stack->capacity; }

//스택의 위치가 0인지 확인
int isEmpty(Stack *stack) { return stack->index == 0; }

void push(Stack *stack, char element) {
  //스택이 다 찼다면
  if (isFull(stack)) {
    //스택의 최대값을 두배로 늘임
    stack->capacity *= 2;
    //기존 스택을 늘린 스택으로 옮겨줌
    stack->arr = (char *)realloc(stack->arr, sizeof(char) * stack->capacity);
  }
  //스택의 해당 위치에 값을 넣어줌
  stack->arr[stack->index] = element;
  //스택의 위치를 한칸 올림
  stack->index++;
}

char pop(Stack *stack) {
  //스택의 위치가 가장 아래라면
  if (isEmpty(stack)) {
    //더이상 남은게 없다는 메세지 출력
    printf("Error: stack is empty.\n");
    return '\0'; 
  }
  //스택의 위치를 하나 내리고
  stack->index--;
  //해당 위치의 스택값을 반환
  return stack->arr[stack->index];
}

char peek(Stack *stack) {
  //스택의 위치가 가장 아래라면 종료
  if (isEmpty(stack)) {
    return '\0'; 
  }
  //스택 위치 하나 아래값을 반환
  return stack->arr[stack->index - 1];
}

int precedence(char ch) {
  switch (ch) {
  case '+':
  case '-':
    return 1;
  case '*':
  case '/':
    return 2;
  case '^':
    return 3;
  default:
    return -1;
  }
}

void infixToPostfix(char *infix, char *postfix) {
  //괄호를 처리할 스택 선언
  Stack *stack = createStack();
  int i = 0, j = 0;
  char ch;

  //배열의 끝을 '\0'으로 표시했으므로 나올 때까지 반복
  while (infix[i] != '\0') {
    //operater에 infix값을 넣어줌
    ch = infix[i];

    //숫자가 오거나 알파벳이 오면
    if (isalpha(ch) || isdigit(ch)) {
      //postfix에 그냥 담아줌
      postfix[j] = ch;
      //다음번으로 올려줌
      j++;
    } 
    //여는 괄호가 오면 스택에 담아줌
    else if (ch == '(') {
      push(stack, ch);
    } 
    //닫는 괄호가 오면 
    else if (ch == ')') {
      //여는 괄호가 나올때까지 postfix에 넣어줌
      while (peek(stack) != '(') {
        postfix[j] = pop(stack);
        j++;
      }
      //여는 괄호는 postfix에 안넣고 pop해서 버림
      pop(stack); // Remove the '(' from the stack
    } 
    //연산자가 오면
    else {
      //스택이 끝이 아니고 
      while (!isEmpty(stack) && precedence(ch) <= precedence(peek(stack))) {
        //postfix배열에 값을 다 담아줌
        postfix[j] = pop(stack);
        j++;
      }
      push(stack, ch);
    }
    //다음 infix배열값으로 넘어감
    i++;
  }

  //스택이 비어있지 않다면, 남은 스택값을 모두 postfix배열에 넣어줌
  while (!isEmpty(stack)) {
    postfix[j] = pop(stack);
    j++;
  }
  //postfix배열 마지막에 '\0'을 넣어서 끝임을 표현
  postfix[j] = '\0';

  //스택은 메모리 할당을 해제
  free(stack->arr);
  free(stack);
}

// Main function to test the infix to postfix conversion
int main() {

  // 프로그램 시간 측정
  clock_t start = clock();

  char infix[100], postfix[100];

  printf("Enter an infix expression: ");

  /*
  scanf("%s", infix);
  infixToPostfix(infix, postfix);
  */

  fgets(infix, 100, stdin);

  // Remove any whitespace characters from the infix expression
  int len = strlen(infix);
  int k = 0;
  for (int i = 0; i < len; i++) {
    char ch = infix[i];
    if (!isspace(ch)) {
      infix[k] = ch;
      k++;
    }
  }
  infix[k] = '\0';

  infixToPostfix(infix, postfix);

  printf("Postfix expression: %s\n", postfix);

  clock_t end = clock();
  printf("\n\n소요 시간: %lf\n", (double)(end - start) / CLOCKS_PER_SEC);

  return 0;
}
